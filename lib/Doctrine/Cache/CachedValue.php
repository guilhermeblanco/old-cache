<?php

declare(strict_types = 1);

/*
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software consists of voluntary contributions made by many individuals and is licensed under the MIT license.
 * For more information, see <http://www.doctrine-project.org>.
 */

namespace Doctrine\Cache;

/**
 * Represents the internal Cache Entry Value with in a {@link Cache}.
 *
 * The actual value passed to the Cache is represented in an internal format, generated by passing the value through an
 * {@link Converter\Converter}.
 *
 * {@link CachedValue}s additionally store and provide meta information about Cache Entry Values, including information
 * for dealing with expiry.
 *
 * @package Doctrine\Cache
 *
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 */
class CachedValue
{
    /**
     * @var mixed The internal representation of the Cache Entry value.
     */
    private $internalValue;

    /**
     * @var float The time (since Epoch) in microseconds since the internal value was created.
     */
    private $creationTime;

    /**
     * @var float The time (since the Epoch) in microseconds since the internal value was last modified.
     */
    private $modificationTime;

    /**
     * @var float The time (since the Epoch) in microseconds when the Cache Entry associated with this value should be
     * considered expired. A value of -1 indicates that the Cache Entry should never expire.
     */
    private $expiryTime;

    /**
     * Constructs a {@link CachedValue} with the creation, access and modification times being the current time.
     *
     * @param mixed $internalValue the internal representation of the value
     * @param float $creationTime  the time when the cache entry was created
     * @param float $expiryTime    the time when the cache entry should expire
     */
    public function __construct($internalValue, float $creationTime, float $expiryTime)
    {
        $this->internalValue    = $internalValue;
        $this->creationTime     = $creationTime;
        $this->modificationTime = $creationTime;
        $this->expiryTime       = $expiryTime;
    }

    /**
     * Gets the internal value.
     *
     * @return mixed
     */
    public function getInternalValue()
    {
        return $this->internalValue;
    }

    /**
     * Sets the internal value with the additional side-effect of updating the modification time.
     *
     * @param mixed $internalValue
     * @param float $modificationTime
     */
    public function setInternalValue($internalValue, float $modificationTime)
    {
        $this->internalValue    = $internalValue;
        $this->modificationTime = $modificationTime;
    }

    /**
     * Gets the time (since the Epoch) in microseconds when the Cache Entry associated with this value should be
     * considered expired.
     *
     * @return float
     */
    public function getExpiryTime() : float
    {
        return $this->expiryTime;
    }

    /**
     * Sets the time (since the Epoch) in microseconds when the Cache Entry associated with this value should be
     * considered expired.
     *
     * @param float $expiryTime
     */
    public function setExpiryTime($expiryTime)
    {
        $this->expiryTime = $expiryTime;
    }

    /**
     * Gets the time (since the Epoch) in microseconds since the internal value was created.
     *
     * @return float
     */
    public function getCreationTime() : float
    {
        return $this->creationTime;
    }

    /**
     * Gets the time (since the Epoch) in microseconds since the internal value was last modified.
     *
     * @return float
     */
    public function getModificationTime() : float
    {
        return $this->modificationTime;
    }

    /**
     * Determines if the Cache Entry associated with this value would be expired at the specified time.
     *
     * @param float $now time in microseconds (since the Epoch)
     *
     * @return bool true if the value would be expired at the specified time
     */
    public function isExpiredAt(float $now) : bool
    {
        return $this->expiryTime > -1 && $this->expiryTime <= $now;
    }
}